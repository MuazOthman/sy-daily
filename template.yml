AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: A bot that collects news about Syria from a curated list of sources and posts daily summaries to Telegram

Parameters:
  TelegramBotToken:
    Type: String
    NoEcho: true
  TelegramApiId:
    Type: String
    NoEcho: true
  TelegramApiHash:
    Type: String
    NoEcho: true
  SessionString:
    Type: String
    NoEcho: true
  OpenaiApiKey:
    Type: String
    NoEcho: true
  TelegramChannelIdEnglish:
    Type: String
    Description: Telegram channel ID for English posts
  TelegramChannelIdArabic:
    Type: String
    Description: Telegram channel ID for Arabic posts

Resources:
  # S3 Bucket for storing news data between Lambda functions
  NewsDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true # Send S3 events to EventBridge

  # Lambda Function 1: Collect and Summarize (writes JSON to S3)
  CollectAndSummarizeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/CollectAndSummarize
      Handler: CollectAndSummarize.handler
      Timeout: 600 # Increased timeout for web scraping and AI processing
      MemorySize: 1024
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(10 21 * * ? *) # Run daily at 21:10 UTC (00:10 Damascus time)
            Description: Daily execution of the news collection and summarization
            Enabled: true
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3WritePolicy:
            BucketName: !Ref NewsDataBucket
      Environment:
        Variables:
          NODE_OPTIONS: --enable-source-maps
          NODE_ENV: production
          IS_LAMBDA: "true"
          S3_BUCKET_NAME: !Ref NewsDataBucket
          TELEGRAM_API_ID: !Ref TelegramApiId
          TELEGRAM_API_HASH: !Ref TelegramApiHash
          SESSION_STRING: !Ref SessionString
          OPENAI_API_KEY: !Ref OpenaiApiKey

  # Lambda Function 2a: Post to Telegram (English)
  PostToTelegramEnglishFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/PostToTelegram
      Handler: PostToTelegram.handler
      Timeout: 60
      MemorySize: 512
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref NewsDataBucket
      Environment:
        Variables:
          NODE_OPTIONS: --enable-source-maps
          NODE_ENV: production
          IS_LAMBDA: "true"
          CONTENT_LANGUAGE: "english"
          TELEGRAM_BOT_TOKEN: !Ref TelegramBotToken
          TELEGRAM_CHANNEL_ID: !Ref TelegramChannelIdEnglish
      Events:
        FromEventBridge:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source: ["aws.s3"]
              detail-type: ["Object Created"]
              detail:
                bucket:
                  name: [!Ref NewsDataBucket]
                # EventBridge supports prefix filtering; combine with a code check for ".json" if needed.
                object:
                  key:
                    - prefix: "news-data/"

  # Lambda Function 2b: Post to Telegram (Arabic)
  PostToTelegramArabicFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/PostToTelegram
      Handler: PostToTelegram.handler
      Timeout: 60
      MemorySize: 512
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref NewsDataBucket
      Environment:
        Variables:
          NODE_OPTIONS: --enable-source-maps
          NODE_ENV: production
          IS_LAMBDA: "true"
          CONTENT_LANGUAGE: "arabic"
          TELEGRAM_BOT_TOKEN: !Ref TelegramBotToken
          TELEGRAM_CHANNEL_ID: !Ref TelegramChannelIdArabic
      Events:
        FromEventBridge:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source: ["aws.s3"]
              detail-type: ["Object Created"]
              detail:
                bucket:
                  name: [!Ref NewsDataBucket]
                object:
                  key:
                    - prefix: "news-data/"
