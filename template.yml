AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: A bot that collects news about Syria from a curated list of sources and posts daily summaries to Telegram

Globals:
  Function:
    Runtime: nodejs22.x
    Architectures:
      - arm64
    EventInvokeConfig:
      MaximumEventAgeInSeconds: 300 # 5 minutes
      MaximumRetryAttempts: 2 # 2 retries
    Tracing: Active
    Environment:
      Variables:
        STATE_TABLE_NAME: !Ref StateTable
        NODE_OPTIONS: --enable-source-maps
        NODE_ENV: production
        IS_LAMBDA: "true"
        BUS_NAME: !GetAtt GitHubActionsEventBus.Arn

Parameters:
  TelegramBotToken:
    Type: String
    NoEcho: true
  TelegramApiId:
    Type: String
    NoEcho: true
  TelegramApiHash:
    Type: String
    NoEcho: true
  SessionString:
    Type: String
    NoEcho: true
  OpenaiApiKey:
    Type: String
    NoEcho: true
  AnthropicApiKey:
    Type: String
    NoEcho: true
    Default: ""
  AiModel:
    Type: String
    Default: "openai:gpt-4.1-2025-04-14"
    Description: AI model to use with provider prefix (e.g., openai:gpt-4.1-2025-04-14, anthropic:claude-3-5-sonnet-20241022)
  TelegramChannelIdEnglish:
    Type: String
    Description: Telegram channel ID for English posts
  TelegramChannelIdArabic:
    Type: String
    Description: Telegram channel ID for Arabic posts
  GithubToken:
    Type: String
    NoEcho: true
    Description: GitHub token for publishing to website
  SimulateWebsitePublish:
    Type: String
    Default: "false"
    Description: Whether to simulate the website publish
  AlertEmail:
    Type: String
    Description: Email address to receive DLQ alerts
Resources:
  # SNS Topic for DLQ Alerts
  DLQAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Lambda DLQ Alerts
      Subscription:
        - Endpoint: !Ref AlertEmail
          Protocol: email

  # SQS Dead Letter Queues - One per Lambda function
  CollectFunctionDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-CollectFunction-DLQ
      MessageRetentionPeriod: 1209600 # 14 days
      VisibilityTimeout: 300

  CollectFunctionDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alert when messages are sent to CollectFunction DLQ
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Sum
      Period: 120
      EvaluationPeriods: 1
      Threshold: 2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt CollectFunctionDLQ.QueueName
      AlarmActions:
        - !Ref DLQAlertTopic

  DeduplicateFunctionDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-DeduplicateFunction-DLQ
      MessageRetentionPeriod: 1209600 # 14 days
      VisibilityTimeout: 300

  DeduplicateFunctionDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alert when messages are sent to DeduplicateFunction DLQ
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Sum
      Period: 120
      EvaluationPeriods: 1
      Threshold: 2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DeduplicateFunctionDLQ.QueueName
      AlarmActions:
        - !Ref DLQAlertTopic

  SummarizeFunctionDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-SummarizeFunction-DLQ
      MessageRetentionPeriod: 1209600 # 14 days
      VisibilityTimeout: 300

  SummarizeFunctionDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alert when messages are sent to SummarizeFunction DLQ
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Sum
      Period: 120
      EvaluationPeriods: 1
      Threshold: 2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt SummarizeFunctionDLQ.QueueName
      AlarmActions:
        - !Ref DLQAlertTopic

  PublishToWebsiteFunctionDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-PublishToWebsiteFunction-DLQ
      MessageRetentionPeriod: 1209600 # 14 days
      VisibilityTimeout: 300

  PublishToWebsiteFunctionDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alert when messages are sent to PublishToWebsiteFunction DLQ
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Sum
      Period: 120
      EvaluationPeriods: 1
      Threshold: 2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt PublishToWebsiteFunctionDLQ.QueueName
      AlarmActions:
        - !Ref DLQAlertTopic

  PostToTelegramEnglishFunctionDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-PostToTelegramEnglishFunction-DLQ
      MessageRetentionPeriod: 1209600 # 14 days
      VisibilityTimeout: 300

  PostToTelegramEnglishFunctionDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alert when messages are sent to PostToTelegramEnglishFunction DLQ
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Sum
      Period: 120
      EvaluationPeriods: 1
      Threshold: 2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt PostToTelegramEnglishFunctionDLQ.QueueName
      AlarmActions:
        - !Ref DLQAlertTopic

  PostToTelegramArabicFunctionDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-PostToTelegramArabicFunction-DLQ
      MessageRetentionPeriod: 1209600 # 14 days
      VisibilityTimeout: 300

  PostToTelegramArabicFunctionDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alert when messages are sent to PostToTelegramArabicFunction DLQ
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Sum
      Period: 120
      EvaluationPeriods: 1
      Threshold: 2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt PostToTelegramArabicFunctionDLQ.QueueName
      AlarmActions:
        - !Ref DLQAlertTopic

  # Custom EventBridge Event Bus for GitHub Actions
  GitHubActionsEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub GitHubEventBus-${AWS::StackName}

  # S3 Bucket for storing news data between Lambda functions
  NewsDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true # Send S3 events to EventBridge

  StateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE

  # Lambda Function 1: Collect and Summarize (writes JSON to S3)
  CollectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/Collect
      Handler: Collect.handler
      Timeout: 600 # Increased timeout for web scraping
      MemorySize: 1024
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt CollectFunctionDLQ.Arn
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(01 20 * * ? *) # Run daily at 20:01 UTC (23:01 Damascus time)
            Description: Daily execution of the news collection
            Enabled: true
      Policies:
        - S3WritePolicy:
            BucketName: !Ref NewsDataBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref StateTable
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref GitHubActionsEventBus
        - SQSSendMessagePolicy:
            QueueName: !GetAtt CollectFunctionDLQ.QueueName
        - AWSXRayDaemonWriteAccess
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref NewsDataBucket
          TELEGRAM_API_ID: !Ref TelegramApiId
          TELEGRAM_API_HASH: !Ref TelegramApiHash
          SESSION_STRING: !Ref SessionString
          OPENAI_API_KEY: !Ref OpenaiApiKey
          ANTHROPIC_API_KEY: !Ref AnthropicApiKey
          AI_MODEL: !Ref AiModel

  DeduplicateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/Deduplicate
      Handler: Deduplicate.handler
      Timeout: 900 # Increased timeout for AI processing
      MemorySize: 1024
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt DeduplicateFunctionDLQ.Arn
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref NewsDataBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref StateTable
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref GitHubActionsEventBus
        - SQSSendMessagePolicy:
            QueueName: !GetAtt DeduplicateFunctionDLQ.QueueName
        - AWSXRayDaemonWriteAccess
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref NewsDataBucket
          TELEGRAM_API_ID: !Ref TelegramApiId
          TELEGRAM_API_HASH: !Ref TelegramApiHash
          SESSION_STRING: !Ref SessionString
          OPENAI_API_KEY: !Ref OpenaiApiKey
          ANTHROPIC_API_KEY: !Ref AnthropicApiKey
          AI_MODEL: !Ref AiModel
      Events:
        FromEventBridge:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref GitHubActionsEventBus
            Pattern:
              source: ["news.collection"]
              detail-type: ["NewsCollected"]
  SummarizeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/Summarize
      Handler: Summarize.handler
      Timeout: 600 # Increased timeout for AI processing
      MemorySize: 512
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt SummarizeFunctionDLQ.Arn
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref NewsDataBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref StateTable
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref GitHubActionsEventBus
        - SQSSendMessagePolicy:
            QueueName: !GetAtt SummarizeFunctionDLQ.QueueName
        - AWSXRayDaemonWriteAccess
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref NewsDataBucket
          TELEGRAM_API_ID: !Ref TelegramApiId
          TELEGRAM_API_HASH: !Ref TelegramApiHash
          SESSION_STRING: !Ref SessionString
          OPENAI_API_KEY: !Ref OpenaiApiKey
          ANTHROPIC_API_KEY: !Ref AnthropicApiKey
          AI_MODEL: !Ref AiModel
      Events:
        FromEventBridge:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref GitHubActionsEventBus
            Pattern:
              source: ["news.deduplication"]
              detail-type: ["NewsDeduplicated"]

  PublishToWebsiteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/PublishToWebsite
      Handler: PublishToWebsite.handler
      Timeout: 60
      MemorySize: 256
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt PublishToWebsiteFunctionDLQ.Arn
      Layers:
        - arn:aws:lambda:us-east-1:347599033421:layer:amazon_linux_fonts:1
        - arn:aws:lambda:us-east-1:347599033421:layer:stix-fonts:1
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref NewsDataBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref StateTable
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref GitHubActionsEventBus
        - SQSSendMessagePolicy:
            QueueName: !GetAtt PublishToWebsiteFunctionDLQ.QueueName
        - AWSXRayDaemonWriteAccess
      Environment:
        Variables:
          FONTCONFIG_PATH: /opt/etc/fonts
          GITHUB_OWNER: "MuazOthman"
          GITHUB_REPO: "www.syria-daily.com"
          GITHUB_BRANCH: "main"
          GITHUB_TOKEN: !Ref GithubToken
          BUCKET_NAME: !Ref NewsDataBucket
          SIMULATE_WEBSITE_PUBLISH: !Ref SimulateWebsitePublish
      Events:
        FromEventBridge:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref GitHubActionsEventBus
            Pattern:
              source: ["news.summarization"]
              detail-type: ["NewsSummarized"]

  PostToTelegramEnglishFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/PostToTelegram
      Handler: PostToTelegram.handler
      Timeout: 60
      MemorySize: 512
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt PostToTelegramEnglishFunctionDLQ.Arn
      Layers:
        - arn:aws:lambda:us-east-1:347599033421:layer:amazon_linux_fonts:1
        - arn:aws:lambda:us-east-1:347599033421:layer:stix-fonts:1
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref NewsDataBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref StateTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt PostToTelegramEnglishFunctionDLQ.QueueName
        - AWSXRayDaemonWriteAccess
      Environment:
        Variables:
          CONTENT_LANGUAGE: "english"
          FONTCONFIG_PATH: /opt/etc/fonts
          TELEGRAM_API_ID: !Ref TelegramApiId
          TELEGRAM_API_HASH: !Ref TelegramApiHash
          SESSION_STRING: !Ref SessionString
          TELEGRAM_CHANNEL_ID: !Ref TelegramChannelIdEnglish
          BUCKET_NAME: !Ref NewsDataBucket
      Events:
        GitHubActionsEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref GitHubActionsEventBus
            Pattern:
              source: ["gh.actions"]
              detail-type: ["summaries-published"]

  PostToTelegramArabicFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/PostToTelegram
      Handler: PostToTelegram.handler
      Timeout: 60
      MemorySize: 512
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt PostToTelegramArabicFunctionDLQ.Arn
      Layers:
        - arn:aws:lambda:us-east-1:347599033421:layer:amazon_linux_fonts:1
        - arn:aws:lambda:us-east-1:347599033421:layer:stix-fonts:1
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref NewsDataBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref StateTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt PostToTelegramArabicFunctionDLQ.QueueName
        - AWSXRayDaemonWriteAccess
      Environment:
        Variables:
          CONTENT_LANGUAGE: "arabic"
          FONTCONFIG_PATH: /opt/etc/fonts
          TELEGRAM_API_ID: !Ref TelegramApiId
          TELEGRAM_API_HASH: !Ref TelegramApiHash
          SESSION_STRING: !Ref SessionString
          TELEGRAM_CHANNEL_ID: !Ref TelegramChannelIdArabic
          BUCKET_NAME: !Ref NewsDataBucket
      Events:
        GitHubActionsEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref GitHubActionsEventBus
            Pattern:
              source: ["gh.actions"]
              detail-type: ["summaries-published"]
