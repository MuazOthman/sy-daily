AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: A bot that collects news about Syria from a curated list of sources and posts daily summaries to Telegram

Globals:
  Function:
    Runtime: nodejs22.x
    Architectures:
      - arm64

Parameters:
  TelegramBotToken:
    Type: String
    NoEcho: true
  TelegramApiId:
    Type: String
    NoEcho: true
  TelegramApiHash:
    Type: String
    NoEcho: true
  SessionString:
    Type: String
    NoEcho: true
  OpenaiApiKey:
    Type: String
    NoEcho: true
  AnthropicApiKey:
    Type: String
    NoEcho: true
    Default: ""
  AiModel:
    Type: String
    Default: "openai:gpt-4.1-2025-04-14"
    Description: AI model to use with provider prefix (e.g., openai:gpt-4.1-2025-04-14, anthropic:claude-3-5-sonnet-20241022)
  TelegramChannelIdEnglish:
    Type: String
    Description: Telegram channel ID for English posts
  TelegramChannelIdArabic:
    Type: String
    Description: Telegram channel ID for Arabic posts
  GithubToken:
    Type: String
    NoEcho: true
    Description: GitHub token for publishing to website
Resources:
  # Custom EventBridge Event Bus for GitHub Actions
  GitHubActionsEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub GitHubEventBus-${AWS::StackName}

  # S3 Bucket for storing news data between Lambda functions
  NewsDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true # Send S3 events to EventBridge

  # Lambda Function 1: Collect and Summarize (writes JSON to S3)
  CollectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/Collect
      Handler: Collect.handler
      Timeout: 600 # Increased timeout for web scraping
      MemorySize: 1024
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(01 20 * * ? *) # Run daily at 20:01 UTC (23:01 Damascus time)
            Description: Daily execution of the news collection
            Enabled: true
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3WritePolicy:
            BucketName: !Ref NewsDataBucket
      Environment:
        Variables:
          NODE_OPTIONS: --enable-source-maps
          NODE_ENV: production
          IS_LAMBDA: "true"
          S3_BUCKET_NAME: !Ref NewsDataBucket
          TELEGRAM_API_ID: !Ref TelegramApiId
          TELEGRAM_API_HASH: !Ref TelegramApiHash
          SESSION_STRING: !Ref SessionString
          OPENAI_API_KEY: !Ref OpenaiApiKey
          ANTHROPIC_API_KEY: !Ref AnthropicApiKey
          AI_MODEL: !Ref AiModel

  DeduplicateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/Deduplicate
      Handler: Deduplicate.handler
      Timeout: 900 # Increased timeout for AI processing
      MemorySize: 1024
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref NewsDataBucket
      Environment:
        Variables:
          NODE_OPTIONS: --enable-source-maps
          NODE_ENV: production
          IS_LAMBDA: "true"
          S3_BUCKET_NAME: !Ref NewsDataBucket
          TELEGRAM_API_ID: !Ref TelegramApiId
          TELEGRAM_API_HASH: !Ref TelegramApiHash
          SESSION_STRING: !Ref SessionString
          OPENAI_API_KEY: !Ref OpenaiApiKey
          ANTHROPIC_API_KEY: !Ref AnthropicApiKey
          AI_MODEL: !Ref AiModel
      Events:
        FromEventBridge:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source: ["aws.s3"]
              detail-type: ["Object Created"]
              detail:
                bucket:
                  name: [!Ref NewsDataBucket]
                object:
                  key:
                    - prefix: "collected-news/"

  SummarizeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/Summarize
      Handler: Summarize.handler
      Timeout: 600 # Increased timeout for AI processing
      MemorySize: 512
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref NewsDataBucket
      Environment:
        Variables:
          NODE_OPTIONS: --enable-source-maps
          NODE_ENV: production
          IS_LAMBDA: "true"
          S3_BUCKET_NAME: !Ref NewsDataBucket
          TELEGRAM_API_ID: !Ref TelegramApiId
          TELEGRAM_API_HASH: !Ref TelegramApiHash
          SESSION_STRING: !Ref SessionString
          OPENAI_API_KEY: !Ref OpenaiApiKey
          ANTHROPIC_API_KEY: !Ref AnthropicApiKey
          AI_MODEL: !Ref AiModel
      Events:
        FromEventBridge:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source: ["aws.s3"]
              detail-type: ["Object Created"]
              detail:
                bucket:
                  name: [!Ref NewsDataBucket]
                object:
                  key:
                    - prefix: "deduplicated-news/"

  PublishToWebsiteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/PublishToWebsite
      Handler: PublishToWebsite.handler
      Timeout: 60
      MemorySize: 256
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref NewsDataBucket
      Environment:
        Variables:
          NODE_OPTIONS: --enable-source-maps
          NODE_ENV: production
          IS_LAMBDA: "true"
          GITHUB_OWNER: "MuazOthman"
          GITHUB_REPO: "www.syria-daily.com"
          GITHUB_BRANCH: "main"
          BASE_PATH: "src/data/blog"
          GITHUB_TOKEN: !Ref GithubToken
      Events:
        FromEventBridge:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source: ["aws.s3"]
              detail-type: ["Object Created"]
              detail:
                bucket:
                  name: [!Ref NewsDataBucket]
                object:
                  key:
                    - prefix: "summarized-news/"

  PostToTelegramEnglishFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/PostToTelegram
      Handler: PostToTelegram.handler
      Timeout: 60
      MemorySize: 512
      Layers:
        - arn:aws:lambda:us-east-1:347599033421:layer:amazon_linux_fonts:1
        - arn:aws:lambda:us-east-1:347599033421:layer:stix-fonts:1
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref NewsDataBucket
      Environment:
        Variables:
          NODE_OPTIONS: --enable-source-maps
          NODE_ENV: production
          IS_LAMBDA: "true"
          CONTENT_LANGUAGE: "english"
          FONTCONFIG_PATH: /opt/etc/fonts
          TELEGRAM_API_ID: !Ref TelegramApiId
          TELEGRAM_API_HASH: !Ref TelegramApiHash
          SESSION_STRING: !Ref SessionString
          TELEGRAM_CHANNEL_ID: !Ref TelegramChannelIdEnglish
          BUCKET_NAME: !Ref NewsDataBucket
      Events:
        GitHubActionsEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref GitHubActionsEventBus
            Pattern:
              source: ["gh.actions"]
              detail-type: ["summaries-published"]

  PostToTelegramArabicFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/PostToTelegram
      Handler: PostToTelegram.handler
      Timeout: 60
      MemorySize: 512
      Layers:
        - arn:aws:lambda:us-east-1:347599033421:layer:amazon_linux_fonts:1
        - arn:aws:lambda:us-east-1:347599033421:layer:stix-fonts:1
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref NewsDataBucket
      Environment:
        Variables:
          NODE_OPTIONS: --enable-source-maps
          NODE_ENV: production
          IS_LAMBDA: "true"
          CONTENT_LANGUAGE: "arabic"
          FONTCONFIG_PATH: /opt/etc/fonts
          TELEGRAM_API_ID: !Ref TelegramApiId
          TELEGRAM_API_HASH: !Ref TelegramApiHash
          SESSION_STRING: !Ref SessionString
          TELEGRAM_CHANNEL_ID: !Ref TelegramChannelIdArabic
          BUCKET_NAME: !Ref NewsDataBucket
      Events:
        GitHubActionsEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref GitHubActionsEventBus
            Pattern:
              source: ["gh.actions"]
              detail-type: ["summaries-published"]
